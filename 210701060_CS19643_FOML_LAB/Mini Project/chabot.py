{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5879b9fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import tkinter as tk\n",
    "from tkinter import scrolledtext\n",
    "\n",
    "def load_dataset():\n",
    "    try:\n",
    "        dataset = pd.read_csv('schemes1.csv')\n",
    "        return dataset\n",
    "    except FileNotFoundError:\n",
    "        print(\"Error: Dataset file not found.\")\n",
    "        return None\n",
    "\n",
    "def recommend_schemes(user_query):\n",
    "    dataset = load_dataset()\n",
    "    if dataset is not None:\n",
    "        matching_schemes = dataset[dataset['Scheme Name'].str.contains(user_query, case=False)]\n",
    "        return matching_schemes['Scheme Name'].tolist()\n",
    "    else:\n",
    "        return []\n",
    "\n",
    "def process_query():\n",
    "    user_query = query_entry.get()\n",
    "    scheme_names = recommend_schemes(user_query)\n",
    "    output_text.delete('1.0', tk.END)\n",
    "    if scheme_names:\n",
    "        output_text.insert(tk.END, \"Matching Scheme Names:\\n\\n\")\n",
    "        for scheme_name in scheme_names:\n",
    "            output_text.insert(tk.END, f\"- {scheme_name}\\n\")\n",
    "        output_text.insert(tk.END, \"\\nEnter scheme name for more details:\")\n",
    "    else:\n",
    "        output_text.insert(tk.END, \"No matching scheme names found.\\n\\n\")\n",
    "def process_scheme_details():\n",
    "    scheme_name = scheme_entry.get()\n",
    "    dataset = load_dataset()\n",
    "    if dataset is not None:\n",
    "        matching_scheme = dataset[dataset['Scheme Name'].str.lower() == scheme_name.lower()]\n",
    "        output_text.delete('1.0', tk.END)\n",
    "        if not matching_scheme.empty:\n",
    "            scheme_details = matching_scheme.iloc[0]\n",
    "            output_text.insert(tk.END, f\"\\nDetails for Scheme '{scheme_name}':\\n\")\n",
    "            output_text.insert(tk.END, f\"Description: {scheme_details['Description']}\\n\")\n",
    "            output_text.insert(tk.END, f\"Eligibility Criteria: {scheme_details['Eligibility Criteria']}\\n\")\n",
    "            output_text.insert(tk.END, f\"Benefits: {scheme_details['Benefits']}\\n\\n\")\n",
    "        else:\n",
    "            output_text.insert(tk.END, f\"Scheme '{scheme_name}' not found.\\n\\n\")\n",
    "    else:\n",
    "        output_text.insert(tk.END, \"Error: Dataset file not found.\\n\\n\")\n",
    "\n",
    "root = tk.Tk()\n",
    "root.title(\"Scholarship Recommendation Chatbot\")\n",
    "\n",
    "screen_width = root.winfo_screenwidth()\n",
    "screen_height = root.winfo_screenheight()\n",
    "\n",
    "# Set window size and position\n",
    "window_width = int(screen_width * 0.8)\n",
    "window_height = int(screen_height * 0.8)\n",
    "window_x = (screen_width - window_width) // 2\n",
    "window_y = (screen_height - window_height) // 2\n",
    "root.geometry(f\"{window_width}x{window_height}+{window_x}+{window_y}\")\n",
    "\n",
    "query_label = tk.Label(root, text=\"Enter your query:\")\n",
    "query_label.grid(row=0, column=0, padx=10, pady=10)\n",
    "\n",
    "query_entry = tk.Entry(root, width=50)\n",
    "query_entry.grid(row=0, column=1, padx=10, pady=10)\n",
    "\n",
    "search_button = tk.Button(root, text=\"Search\", command=process_query)\n",
    "search_button.grid(row=0, column=2, padx=10, pady=10)\n",
    "\n",
    "output_text = scrolledtext.ScrolledText(root, width=80, height=20, wrap=tk.WORD)\n",
    "output_text.grid(row=1, column=0, columnspan=3, padx=10, pady=10)\n",
    "\n",
    "scheme_label = tk.Label(root, text=\"Enter scheme name for more details:\")\n",
    "scheme_label.grid(row=2, column=0, padx=10, pady=10)\n",
    "\n",
    "scheme_entry = tk.Entry(root, width=50)\n",
    "scheme_entry.grid(row=2, column=1, padx=10, pady=10)\n",
    "\n",
    "details_button = tk.Button(root, text=\"Show Details\", command=process_scheme_details)\n",
    "details_button.grid(row=2, column=2, padx=10, pady=10)\n",
    "\n",
    "root.mainloop()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
